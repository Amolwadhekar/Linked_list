#include <iostream>
using namespace std;

class Node{
    public:
        int val;
        Node* next;

    Node(int data){
        val=data;
        next=NULL;
    }
};

void addNode(Node* head, int val){

    Node* n = new Node(val);

    if(!head){
        head=n;
        return;
    }

    Node* temp = head;

    while(temp->next){
        temp=temp->next;
    }

    temp->next=n;
}

void addNodeToHead(Node* &head, int val){
    Node* n = new Node(val);

    if(head==NULL){
        head=n;
        return;
    }

    n->next=head;
    head=n;

}

void deleteNode(Node* &head, int val){
    Node* temp = head;
    Node* toDelete;

    if(temp->val==val){
        toDelete=head;
        head=temp->next;
        delete toDelete;
        return;
    }

    while(temp->next!=NULL and temp->next->val!=val){
        temp=temp->next;
    }

    if(temp->next){
        toDelete = temp->next;
        temp->next = temp->next->next;
    }
    
    delete toDelete;

}

void printNode(Node* head){

    Node* temp=head;

    while(temp){
        cout<<temp->val<<"->";
        temp=temp->next;
    }
    cout<<"NULL"<<endl;

}

bool search(Node* head, int data){
    Node* temp=head;

    while(temp!=NULL){
        if(temp->val==data) return true;

        temp=temp->next;
    }

    return false;

}

void reverseLL(Node* &head){
    Node* prev=NULL;
    Node* curr = head;
    Node* next;

    while(curr){
        next=curr->next;
        curr->next=prev;

        prev=curr;
        curr=next;
    }
    head=prev;
}

int main() {
    Node* head = new Node(1);
    addNode(head,2);
    addNode(head,3);
    addNode(head,4);
    printNode(head);
    addNodeToHead(head,5);
    printNode(head);
    
    reverseLL(head);
    printNode(head);

}
